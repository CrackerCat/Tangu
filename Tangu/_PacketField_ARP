#pragma once
#ifndef _PACKETFIELD_ARP
#define _PACKETFIELD_ARP

#include "_PacketField_Ethernet"

typedef struct ARPArchitect
{
	enum class HWType
	{
		ETHERNET = 0x0001,
		EXPERIMENTAL_ETHERNET,
		AMATEUR_RADIO_AX_25,
		PROTEON_PRONET_TOKEN_RING,
		CHAOS,
		IEEE802_NETWORKS,
		ARCNET,
		HYPERCHANNEL,
		LANSTAR,
		AUTONET_SHORT_ADDRESS,
		LOCALTALK,
		LOCALNET
	};
	unsigned __int16		HardwareType;		// Hardware Type
	unsigned __int16		ProtocolType;		// Protocol Type
	unsigned __int8		MACLen;				// Hardware Address Length
	unsigned __int8		IPLen;					// Protocol Address Length
	
	enum class Opcode
	{
		REQUEST = 0x01, REPLY = 0x02
	};
	unsigned __int16		Operation;			// Operation Code

	byte						SenderMAC[6];		// Sender Hardware Address
	byte						SenderIP[4];			// Sender Protocol Address
	byte						TargetMAC[6];		// Target Hardware Address
	byte						TargetIP[4];			// Target Protocol Address
} ARPArch;

typedef class __ARP
{
public:
	EthernetHeader		_EthHead;
	ARPArchitect			_ARP;

	byte					_Msg[_MIN_ETHERNETLEN];
	Net::L3				_Rsrc;

public:
	__ARP::__ARP()
	{
		Net::Utility::GetIPAddress(_Rsrc.ISrc);
		Net::Utility::GetMACAddress(_Rsrc.MSrc);
	}

public:
	void __ARP::GetARP(ARPArchitect::Opcode Operation)
	{
		if (Operation == ARPArchitect::Opcode::REQUEST)
		{
			_Rsrc.MDst = "FF-FF-FF-FF-FF-FF";
		}
		memcpy(_EthHead.Destination, *_Rsrc.MDst, SIZ_HARDWARE);
		memcpy(_EthHead.Source, *_Rsrc.MSrc, SIZ_HARDWARE);
		_EthHead.Type = htons(UCast(16)(EthernetHeader::EthernetType::ARP));

		_ARP.HardwareType = htons(UCast(16)(ARPArchitect::HWType::ETHERNET));
		_ARP.ProtocolType = htons(UCast(16)(EthernetHeader::EthernetType::IPV4));
		_ARP.MACLen = SIZ_HARDWARE;
		_ARP.IPLen = SIZ_PROTOCOL;
		_ARP.Operation = htons(UCast(16)(Operation));
		memcpy(_ARP.SenderMAC, *_Rsrc.MSrc, SIZ_HARDWARE);
		memcpy(_ARP.SenderIP, *_Rsrc.ISrc, SIZ_PROTOCOL);
		memcpy(_ARP.TargetMAC, *_Rsrc.MDst, SIZ_HARDWARE);
		memcpy(_ARP.TargetIP, *_Rsrc.IDst, SIZ_PROTOCOL);

		memcpy(_Msg, &_EthHead, sizeof(EthernetHeader));
		memcpy(_Msg + sizeof(EthernetHeader), &_ARP, sizeof(ARPArchitect));
	}
} ARP;


#endif /* _PACKETFIELD_ARP */
